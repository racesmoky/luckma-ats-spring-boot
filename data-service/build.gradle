buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
		mongodbVersion = '4.0.1'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("de.undercouch:gradle-download-task:3.4.3")
	}
}

plugins {
	id "net.ltgt.apt" version "0.9"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'de.undercouch.download'

group = 'com.emprovise.service'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

ext {
	springCloudVersion = 'Finchley.RELEASE'
	mapstructVersion = "1.2.0.Final"
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	compile('org.springframework.boot:spring-boot-starter-webflux')
    compile('org.springframework.boot:spring-boot-starter-batch')
	compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.security:spring-security-core')
	compile('org.springframework.security:spring-security-config')
	compile "org.mapstruct:mapstruct-jdk8:${mapstructVersion}"
	compile('org.slf4j:slf4j-api')
	compile('de.codecentric:spring-boot-admin-starter-client:2.0.4')
	runtime('net.logstash.logback:logstash-logback-encoder:5.1')
	runtime('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('io.projectreactor:reactor-test')
	apt "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

processResources {
	filesMatching("**/application.properties") {
		expand(project.properties)
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true'
	]
}

task runJar(type: JavaExec, dependsOn: jar) {
	main = "-jar"
	args jar.archivePath
}

def pullCommonDir = new File(buildDir, 'repo')
pullCommonDir.mkdirs()
def mongodbHome = new File("${buildDir}/libs/mongodb-win32-x86_64-2008plus-ssl-${mongodbVersion}")

task downloadMongoDB(type: Download) {
	src "http://downloads.mongodb.org/win32/mongodb-win32-x86_64-2008plus-ssl-${mongodbVersion}.zip"
	dest "${buildDir}/repo"
	overwrite false
}

task extractMongoDB(dependsOn: downloadMongoDB) {
	doLast {
		if(!file("${mongodbHome}").exists()) {
			copy {
				from zipTree("${pullCommonDir}/mongodb-win32-x86_64-2008plus-ssl-${mongodbVersion}.zip")
				into new File(buildDir, "libs")
			}
		}
	}
}

task configMongoDB(dependsOn: extractMongoDB) {
	doLast {
		def mongodbBinDir = new File("${mongodbHome}/bin", "mongod.cfg")

		if (!mongodbBinDir.exists()) {
			println "setting up mongodb config file..."

			def mongodbDataDir = new File("${mongodbHome}", 'data')
			mongodbDataDir.mkdirs()

			def mongodbLogDir = new File("${mongodbHome}", 'logs')
			mongodbLogDir.mkdirs()
			def mongodbLogFile = new File("${mongodbLogDir}/mongo.log")

			copy {
				from "${projectDir.path}/config/mongod.cfg"
				into "${mongodbHome}/bin"
				filter { line -> line.replaceAll("@logs@", "${mongodbLogFile}".replace("\\", "/") ) }
				filter { line -> line.replaceAll("@data@", "${mongodbDataDir}".replace("\\", "/")) }
			}
		}
	}
}

task runMongodb(type: Exec, dependsOn: configMongoDB) {
	workingDir "${mongodbHome}/bin"
	commandLine 'cmd', '/c', "mongod --config mongod.cfg"
}
